import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart';
import '../services/flood_chatbot_service.dart';

/// ‡∏™‡∏£‡πâ‡∏≤‡∏á Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Message
class FloodMessage {
  final String text;
  final bool isUser;
  final DateTime createdAt;

  FloodMessage({
    required this.text,
    required this.isUser,
    DateTime? createdAt,
  }) : createdAt = createdAt ?? DateTime.now();

  String get formattedTime {
    final time = createdAt;
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }
}

class ChatbotScreen extends StatefulWidget {
  const ChatbotScreen({Key? key}) : super(key: key);

  @override
  State<ChatbotScreen> createState() => _ChatbotScreenState();
}

class _ChatbotScreenState extends State<ChatbotScreen> {
  final List<FloodMessage> _messages = [];
  final TextEditingController _textController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final String _sessionId = const Uuid().v4();
  bool _isTyping = false;

  @override
  void initState() {
    super.initState();
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó
    _addBotMessage('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏•‡∏•‡∏µ‡πà ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° üåä\n'
        '‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ\n'
        '‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏Ñ‡∏∞?');
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó
  void _addBotMessage(String text) {
    setState(() {
      _messages.add(FloodMessage(text: text, isUser: false));
    });
    _scrollToBottom();
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  void _addUserMessage(String text) {
    setState(() {
      _messages.add(FloodMessage(text: text, isUser: true));
    });
    _scrollToBottom();
  }

  /// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Enter
  void _handleSubmitted(String text) async {
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πà‡∏≠‡∏á input
    _textController.clear();

    if (text.trim().isEmpty) return;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô list
    _addUserMessage(text);

    setState(() {
      _isTyping = true;
    });

    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (conversationHistory)
      final conversationHistory = _buildConversationHistory();

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å service
      final response = await FloodChatbotService.getChatbotResponse(
        conversationHistory: conversationHistory,
        userMessage: text,
        sessionId: _sessionId,
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏ó‡∏•‡∏á‡πÉ‡∏ô list
      _addBotMessage(response);
    } catch (e) {
      _addBotMessage(
          '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      setState(() {
        _isTyping = false;
      });
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  /// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ API ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à context
  String _buildConversationHistory() {
    // ‡∏à‡∏∞‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö
    // User: ...
    // Bot: ...
    // User: ...
    // Bot: ...
    // ...
    // ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏¢‡∏≤‡∏ß‡πÜ
    final buffer = StringBuffer();
    for (final msg in _messages) {
      if (msg.isUser) {
        buffer.writeln('User: ${msg.text}');
      } else {
        buffer.writeln('Bot: ${msg.text}');
      }
    }
    return buffer.toString();
  }

  /// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô ListView ‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  /// Widget ‡∏´‡∏•‡∏±‡∏Å
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          '‡πÅ‡∏≠‡∏•‡∏•‡∏µ‡πà - ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFF1E88E5),
        elevation: 2,
        actions: [
          IconButton(
            icon: const Icon(Icons.info_outline),
            onPressed: () {
              _showInfoDialog(context);
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: Container(
              decoration: const BoxDecoration(
                color: Color(0xFFF5F5F5),
                image: DecorationImage(
                  image: AssetImage('assets/images/water_bg.jpg'),
                  opacity: 0.1,
                  fit: BoxFit.cover,
                ),
              ),
              child: ListView.builder(
                controller: _scrollController,
                padding: const EdgeInsets.all(8.0),
                itemCount: _messages.length,
                itemBuilder: (context, index) {
                  return _buildMessageItem(_messages[index]);
                },
              ),
            ),
          ),
          if (_isTyping)
            Container(
              padding:
                  const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
              color: Colors.white,
              child: const Row(
                children: [
                  CircleAvatar(
                    backgroundColor: Color(0xFF1E88E5),
                    radius: 16.0,
                    child: Text(
                      '‡∏≠',
                      style: TextStyle(
                          fontWeight: FontWeight.bold, color: Colors.white),
                    ),
                  ),
                  SizedBox(width: 8.0),
                  Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...', style: TextStyle(color: Colors.grey)),
                ],
              ),
            ),
          _buildInputArea(),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á
  Widget _buildInputArea() {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black12,
            blurRadius: 5.0,
            spreadRadius: 1.0,
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          children: [
            Expanded(
              child: TextField(
                controller: _textController,
                decoration: InputDecoration(
                  hintText: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°...',
                  hintStyle: TextStyle(color: Colors.grey[400]),
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16.0,
                    vertical: 12.0,
                  ),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(24.0),
                    borderSide: BorderSide.none,
                  ),
                  filled: true,
                  fillColor: Colors.grey[100],
                ),
                onSubmitted: _handleSubmitted,
              ),
            ),
            const SizedBox(width: 8.0),
            FloatingActionButton(
              onPressed: () => _handleSubmitted(_textController.text),
              backgroundColor: const Color(0xFF1E88E5),
              elevation: 2.0,
              child: const Icon(Icons.send, color: Colors.white),
            ),
          ],
        ),
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô ListView
  Widget _buildMessageItem(FloodMessage message) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment:
            message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!message.isUser) ...[
            CircleAvatar(
              backgroundColor: const Color(0xFF1E88E5),
              radius: 16.0,
              child: const Text(
                '‡∏≠',
                style:
                    TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
              ),
            ),
            const SizedBox(width: 8.0),
          ],
          Flexible(
            child: Container(
              constraints: BoxConstraints(
                maxWidth: MediaQuery.of(context).size.width * 0.75,
              ),
              padding:
                  const EdgeInsets.symmetric(horizontal: 12.0, vertical: 10.0),
              decoration: BoxDecoration(
                color: message.isUser ? const Color(0xFF1E88E5) : Colors.white,
                borderRadius: BorderRadius.circular(16.0),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 4.0,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    message.text,
                    style: TextStyle(
                      color: message.isUser ? Colors.white : Colors.black87,
                      fontSize: 15.0,
                    ),
                  ),
                  const SizedBox(height: 3.0),
                  Text(
                    message.formattedTime,
                    style: TextStyle(
                      color: message.isUser ? Colors.white70 : Colors.black45,
                      fontSize: 10.0,
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (message.isUser) ...[
            const SizedBox(width: 8.0),
            CircleAvatar(
              backgroundColor: Colors.grey[300],
              radius: 16.0,
              child: const Icon(
                Icons.person,
                size: 18.0,
                color: Colors.white,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Dialog ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß
  void _showInfoDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.water_drop, color: Color(0xFF1E88E5)),
            SizedBox(width: 8.0),
            Text('‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏•‡∏•‡∏µ‡πà'),
          ],
        ),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‡πÅ‡∏≠‡∏•‡∏•‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:',
              style: TextStyle(fontSize: 14.0),
            ),
            SizedBox(height: 12.0),
            Text('‚Ä¢ ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°', style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏ê‡∏°‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏û‡∏¢‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
            Text('‚Ä¢ ‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°',
                style: TextStyle(fontSize: 14.0)),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                style: TextStyle(color: Color(0xFF1E88E5))),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _textController.dispose();
    _scrollController.dispose();
    super.dispose();
  }
}
